name: Unit Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "api/**"
      - ".github/workflows/unit-tests.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "api/**"
      - ".github/workflows/unit-tests.yml"

defaults:
  run:
    working-directory: ./api

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ./api/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run linting
        run: npm run lint

      - name: Run unit tests with coverage
        run: npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Run specific service tests
        run: |
          echo "Running CakeService tests..."
          npm test -- cake.service.spec.ts --coverage --collectCoverageFrom="src/cake/cake.service.ts" --watchAll=false

          echo "Running CustomerService tests..."
          npm test -- customer.service.spec.ts --coverage --collectCoverageFrom="src/customer/customer.service.ts" --watchAll=false

          echo "Running OrderService tests..."
          npm test -- order.service.spec.ts --coverage --collectCoverageFrom="src/order/order.service.ts" --watchAll=false

          echo "Running PrismaService tests..."
          npm test -- prisma.service.spec.ts --coverage --collectCoverageFrom="src/services/prisma/prisma.service.ts" --watchAll=false

          echo "Running AuthGuard tests..."
          npm test -- auth.guard.spec.ts --coverage --collectCoverageFrom="src/shared/guard/auth/auth.guard.ts" --watchAll=false

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage/lcov.info
          directory: ./api/coverage/
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage badge
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: ./api/coverage/

  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: unit-tests
    if: always()

    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage-report-20.x
          path: ./coverage

      - name: Display test summary
        run: |
          echo "## üß™ Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Tests execut√©s avec succ√®s:" >> $GITHUB_STEP_SUMMARY
          echo "- üç∞ **CakeService** - Tests CRUD complets" >> $GITHUB_STEP_SUMMARY
          echo "- üë• **CustomerService** - Tests CRUD et gestion d'erreurs" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ **OrderService** - Tests avec relations complexes" >> $GITHUB_STEP_SUMMARY
          echo "- üóÑÔ∏è **PrismaService** - Tests de connexion et op√©rations DB" >> $GITHUB_STEP_SUMMARY
          echo "- üîê **AuthGuard** - Tests de s√©curit√© et authentification JWT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Couverture de code:" >> $GITHUB_STEP_SUMMARY
          echo "Les rapports de couverture sont disponibles dans les artifacts." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Services test√©s:" >> $GITHUB_STEP_SUMMARY
          echo "- Services m√©tier (Cake, Customer, Order)" >> $GITHUB_STEP_SUMMARY
          echo "- Service infrastructure (Prisma)" >> $GITHUB_STEP_SUMMARY
          echo "- Guards de s√©curit√© (Auth)" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: unit-tests
    if: failure()

    steps:
      - name: Notify failure
        run: |
          echo "‚ùå Unit tests have failed!"
          echo "Please check the test results and fix any failing tests."
          exit 1
